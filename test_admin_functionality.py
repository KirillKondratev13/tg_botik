#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
"""

import sys
import os
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(__file__))

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from database import (
            init_db, get_categories, get_products_by_category, get_product,
            add_product, update_product, delete_product, remove_from_cart_by_product
        )
        print("‚úÖ Database functions imported successfully")
    except ImportError as e:
        print(f"‚ùå Database import error: {e}")
        return False
    
    try:
        from handlers.admin_handlers import (
            show_admin_menu, handle_admin_menu, log_admin_action,
            validate_price, validate_text_field, MESSAGES
        )
        print("‚úÖ Admin handlers imported successfully")
    except ImportError as e:
        print(f"‚ùå Admin handlers import error: {e}")
        return False
    
    try:
        from handlers.states import admin_states
        print("‚úÖ Admin states imported successfully")
    except ImportError as e:
        print(f"‚ùå Admin states import error: {e}")
        return False
    
    return True

def test_validation_functions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    from handlers.admin_handlers import validate_price, validate_text_field
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã
    test_cases_price = [
        ("100", True, 100.0),
        ("100.50", True, 100.5),
        ("100,50", True, 100.5),
        ("0", False, 0.0),
        ("-10", False, 0.0),
        ("abc", False, 0.0),
        ("", False, 0.0)
    ]
    
    for price_str, expected_valid, expected_value in test_cases_price:
        is_valid, value = validate_price(price_str)
        if is_valid == expected_valid and (not expected_valid or abs(value - expected_value) < 0.001):
            print(f"‚úÖ Price validation '{price_str}': {is_valid}, {value}")
        else:
            print(f"‚ùå Price validation '{price_str}': expected {expected_valid}, {expected_value}, got {is_valid}, {value}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    test_cases_text = [
        ("Valid text", True),
        ("", False),
        ("   ", False),
        ("A", True),
        ("A" * 255, True),
        ("A" * 256, False)
    ]
    
    for text, expected in test_cases_text:
        result = validate_text_field(text)
        if result == expected:
            print(f"‚úÖ Text validation '{text[:20]}...': {result}")
        else:
            print(f"‚ùå Text validation '{text[:20]}...': expected {expected}, got {result}")

def test_database_operations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    temp_db = tempfile.NamedTemporaryFile(suffix='.db', delete=False)
    temp_db.close()
    
    try:
        # –ü–æ–¥–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import database
        original_db_path = 'music_bot.db'
        
        # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã
        def patch_db_connect():
            return __import__('sqlite3').connect(temp_db.name)
        
        original_connect = database.sqlite3.connect
        database.sqlite3.connect = patch_db_connect
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.init_db()
        print("‚úÖ Database initialized")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = database.get_categories()
        print(f"‚úÖ Categories retrieved: {len(categories)} found")
        
        if categories:
            category_id = categories[0][0]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            test_product_name = "Test Product"
            test_price = 1000.0
            test_description = "Test Description"
            
            database.add_product(test_product_name, category_id, test_price, test_description)
            print("‚úÖ Product added successfully")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏–ª—Å—è
            products = database.get_products_by_category(category_id)
            test_product_found = any(prod[1] == test_product_name for prod in products)
            if test_product_found:
                print("‚úÖ Product found in category")
            else:
                print("‚ùå Product not found after adding")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            database.update_product(test_product_name, category_id, "price", 2000.0)
            print("‚úÖ Product updated successfully")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updated_products = database.get_products_by_category(category_id)
            updated_product = next((prod for prod in updated_products if prod[1] == test_product_name), None)
            if updated_product and updated_product[2] == 2000.0:
                print("‚úÖ Product price updated correctly")
            else:
                print("‚ùå Product price not updated correctly")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            database.remove_from_cart_by_product(test_product_name, category_id)
            print("‚úÖ Cascade deletion from carts completed")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            database.delete_product(test_product_name, category_id)
            print("‚úÖ Product deleted successfully")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            final_products = database.get_products_by_category(category_id)
            test_product_still_exists = any(prod[1] == test_product_name for prod in final_products)
            if not test_product_still_exists:
                print("‚úÖ Product successfully removed from database")
            else:
                print("‚ùå Product still exists after deletion")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        database.sqlite3.connect = original_connect
        
    except Exception as e:
        print(f"‚ùå Database operations error: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            os.unlink(temp_db.name)
        except:
            pass

def test_message_constants():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    from handlers.admin_handlers import MESSAGES
    
    required_messages = [
        'success_product_updated',
        'success_product_added', 
        'success_product_deleted',
        'error_category_not_found',
        'error_invalid_price',
        'error_empty_field',
        'confirm_deletion'
    ]
    
    for msg_key in required_messages:
        if msg_key in MESSAGES:
            print(f"‚úÖ Message '{msg_key}' found: {MESSAGES[msg_key][:30]}...")
        else:
            print(f"‚ùå Message '{msg_key}' missing")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        print("‚ùå Import tests failed. Stopping.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_validation_functions()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
    test_database_operations()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    test_message_constants()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)