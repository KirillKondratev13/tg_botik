import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    is_admin, check_admin_password, get_all_users, block_user, unblock_user,
    get_support_questions, answer_support_question,
    update_product, add_product, delete_product, get_orders_by_status, update_order_status,
    get_categories, get_products_by_category, get_product, remove_from_cart_by_product
)
from .states import admin_states

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
admin_logger = logging.getLogger('admin_actions')
admin_logger.setLevel(logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    'success_product_updated': '‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
    'success_product_added': '‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
    'success_product_deleted': '‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
    'error_category_not_found': '‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
    'error_product_not_found': '‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.',
    'error_invalid_price': '‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.',
    'error_empty_field': '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.',
    'error_invalid_format': '‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞.',
    'confirm_deletion': '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n'
                       '–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n'
                       '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–†'
}

def log_admin_action(user_id, action, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    admin_logger.info(f"Admin {user_id}: {action} - {details}")

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"],
        ["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"],
        ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "üì¶ –ó–∞–∫–∞–∑—ã"],
        ["‚óÄÔ∏è –í—ã–π—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_categories_for_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    categories = get_categories()
    if not categories:
        await update.message.reply_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")
        return False
    
    keyboard = [[cat[1]] for cat in categories] + [["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    action_messages = {
        "edit": "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        "delete": "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        "add": "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"
    }
    
    await update.message.reply_text(action_messages.get(action_type, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"), reply_markup=reply_markup)
    return True

async def show_products_for_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, category_name: str, action_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    categories = get_categories()
    category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
    
    if not category_id:
        await update.message.reply_text(MESSAGES['error_category_not_found'])
        return False
    
    products = get_products_by_category(category_id)
    if not products:
        await update.message.reply_text(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return False
    
    keyboard = []
    for product_id, product_name, price, description in products:
        keyboard.append([f"{product_name} - {price}‚ÇΩ"])
    keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    action_messages = {
        "edit": f"üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        "delete": f"üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    }
    
    await update.message.reply_text(action_messages.get(action_type, f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':"), reply_markup=reply_markup)
    return True

def validate_price(price_str: str) -> tuple[bool, float]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
    try:
        price = float(price_str.replace(',', '.'))
        if price <= 0:
            return False, 0.0
        return True, price
    except ValueError:
        return False, 0.0

def validate_text_field(text: str, min_length: int = 1, max_length: int = 255) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
    return min_length <= len(text.strip()) <= max_length

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in admin_states:
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    admin_logger.info(f"Admin {user_id}: state={admin_states[user_id].get('state')}, text='{text}'")

    # === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê ===
    if admin_states[user_id].get("state") == "edit_product_category":
        if text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = get_categories()
        category_exists = any(cat[1] == text for cat in categories)
        if not category_exists:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return
            
        admin_states[user_id]["edit_category"] = text
        admin_states[user_id]["state"] = "edit_product_select"
        
        if not await show_products_for_selection(update, context, text, "edit"):
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
        return

    if admin_states[user_id].get("state") == "edit_product_select":
        if text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
            admin_states[user_id]["state"] = "edit_product_category"
            await show_categories_for_selection(update, context, "edit")
            return
            
        category_name = admin_states[user_id]["edit_category"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞‚ÇΩ"
        product_name = text.split(" - ")[0] if " - " in text else text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        products = get_products_by_category(category_id) if category_id else []
        product_exists = any(prod[1] == product_name for prod in products)
        
        if not product_exists:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
            
        admin_states[user_id]["edit_product"] = product_name
        admin_states[user_id]["state"] = "edit_product_field"
        
        keyboard = [["üí∞ –¶–µ–Ω–∞"], ["üìù –ù–∞–∑–≤–∞–Ω–∏–µ"], ["üìã –û–ø–∏—Å–∞–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
        return

    if admin_states[user_id].get("state") == "edit_product_field":
        if text == "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º":
            category_name = admin_states[user_id]["edit_category"]
            admin_states[user_id]["state"] = "edit_product_select"
            await show_products_for_selection(update, context, category_name, "edit")
            return
            
        field_mapping = {
            "üí∞ –¶–µ–Ω–∞": "price",
            "üìù –ù–∞–∑–≤–∞–Ω–∏–µ": "name", 
            "üìã –û–ø–∏—Å–∞–Ω–∏–µ": "description"
        }
        
        if text not in field_mapping:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
            
        admin_states[user_id]["edit_field"] = field_mapping[text]
        admin_states[user_id]["state"] = "edit_product_value"
        
        field_prompts = {
            "price": "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            "name": "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            "description": "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
        }
        
        field_name = field_mapping[text]
        keyboard = [["üîô –û—Ç–º–µ–Ω–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(field_prompts[field_name], reply_markup=reply_markup)
        return

    if admin_states[user_id].get("state") == "edit_product_value":
        if text == "üîô –û—Ç–º–µ–Ω–∞":
            admin_states[user_id]["state"] = "edit_product_field"
            product_name = admin_states[user_id]["edit_product"]
            keyboard = [["üí∞ –¶–µ–Ω–∞"], ["üìù –ù–∞–∑–≤–∞–Ω–∏–µ"], ["üìã –û–ø–∏—Å–∞–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
            return

        category_name = admin_states[user_id]["edit_category"]
        product_name = admin_states[user_id]["edit_product"]
        field = admin_states[user_id]["edit_field"]
        new_value = text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if field == "price":
            is_valid, validated_value = validate_price(new_value)
            if not is_valid:
                await update.message.reply_text(MESSAGES['error_invalid_price'])
                return
            new_value = validated_value
        elif field in ["name", "description"]:
            if not validate_text_field(new_value):
                await update.message.reply_text(MESSAGES['error_empty_field'])
                return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            categories = get_categories()
            category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
            
            if category_id:
                update_product(product_name, category_id, field, new_value)
                await update.message.reply_text(MESSAGES['success_product_updated'])
                log_admin_action(user_id, "PRODUCT_UPDATED", f"Product: {product_name}, Field: {field}, Value: {new_value}")
            else:
                await update.message.reply_text(MESSAGES['error_category_not_found'])
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            log_admin_action(user_id, "PRODUCT_UPDATE_ERROR", f"Product: {product_name}, Error: {str(e)}")

        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # === –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ===
    if admin_states[user_id].get("state") == "add_product_category":
        if text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
            
        categories = get_categories()
        category_exists = any(cat[1] == text for cat in categories)
        if not category_exists:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return
            
        admin_states[user_id]["add_category"] = text
        admin_states[user_id]["state"] = "add_product_name"
        
        keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{text}'\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
        return

    if admin_states[user_id].get("state") == "add_product_name":
        if text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
            admin_states[user_id]["state"] = "add_product_category"
            await show_categories_for_selection(update, context, "add")
            return
            
        if not validate_text_field(text):
            await update.message.reply_text(MESSAGES['error_empty_field'])
            return
            
        admin_states[user_id]["add_product_name"] = text.strip()
        admin_states[user_id]["state"] = "add_product_price"
        
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
        return

    if admin_states[user_id].get("state") == "add_product_price":
        if text == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "add_product_name"
            keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
            return
            
        is_valid, price = validate_price(text)
        if not is_valid:
            await update.message.reply_text(MESSAGES['error_invalid_price'])
            return
            
        admin_states[user_id]["add_product_price"] = price
        admin_states[user_id]["state"] = "add_product_description"
        
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
        return

    if admin_states[user_id].get("state") == "add_product_description":
        if text == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "add_product_price"
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
            return
            
        if not validate_text_field(text):
            await update.message.reply_text(MESSAGES['error_empty_field'])
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            category_name = admin_states[user_id]["add_category"]
            product_name = admin_states[user_id]["add_product_name"]
            product_price = admin_states[user_id]["add_product_price"]
            product_description = text.strip()
            
            categories = get_categories()
            category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
            
            if category_id:
                add_product(product_name, category_id, product_price, product_description)
                await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'!")
                log_admin_action(user_id, "PRODUCT_ADDED", f"Name: {product_name}, Category: {category_name}, Price: {product_price}")
            else:
                await update.message.reply_text(MESSAGES['error_category_not_found'])
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            log_admin_action(user_id, "PRODUCT_ADD_ERROR", f"Error: {str(e)}")

        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # === –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ===
    if admin_states[user_id].get("state") == "delete_product_category":
        if text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
            
        categories = get_categories()
        category_exists = any(cat[1] == text for cat in categories)
        if not category_exists:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return
            
        admin_states[user_id]["delete_category"] = text
        admin_states[user_id]["state"] = "delete_product_select"
        
        if not await show_products_for_selection(update, context, text, "delete"):
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
        return

    if admin_states[user_id].get("state") == "delete_product_select":
        if text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
            admin_states[user_id]["state"] = "delete_product_category"
            await show_categories_for_selection(update, context, "delete")
            return
            
        category_name = admin_states[user_id]["delete_category"]
        product_name = text.split(" - ")[0] if " - " in text else text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        products = get_products_by_category(category_id) if category_id else []
        product_exists = any(prod[1] == product_name for prod in products)
        
        if not product_exists:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
            
        admin_states[user_id]["delete_product"] = product_name
        admin_states[user_id]["state"] = "delete_product_confirm"
        
        keyboard = [["üîô –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n–¢–æ–≤–∞—Ä: {product_name}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n{MESSAGES['confirm_deletion']}", reply_markup=reply_markup)
        return

    if admin_states[user_id].get("state") == "delete_product_confirm":
        if text == "üîô –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è":
            category_name = admin_states[user_id]["delete_category"]
            admin_states[user_id]["state"] = "delete_product_select"
            await show_products_for_selection(update, context, category_name, "delete")
            return
            
        if text != "–£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–†":
            await update.message.reply_text("‚ùå –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ: –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–†")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        try:
            category_name = admin_states[user_id]["delete_category"]
            product_name = admin_states[user_id]["delete_product"]
            
            categories = get_categories()
            category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
            
            if category_id:
                # –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                remove_from_cart_by_product(product_name, category_id)
                
                # –ó–∞—Ç–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                delete_product(product_name, category_id)
                
                await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n‚Ä¢ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                log_admin_action(user_id, "PRODUCT_DELETED", f"Product: {product_name}, Category: {category_name}")
            else:
                await update.message.reply_text(MESSAGES['error_category_not_found'])
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            log_admin_action(user_id, "PRODUCT_DELETE_ERROR", f"Product: {product_name}, Error: {str(e)}")

        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # === –ó–ê–ö–ê–ó–´ ===
    if admin_states[user_id].get("state") == "orders_status":
        status = text.strip().lower()
        status_map = {"–Ω–æ–≤—ã–µ": "new", "–≤ —Ä–∞–±–æ—Ç–µ": "in_progress", "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": "completed"}
        
        if status == "üîô –Ω–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
            
        if status not in status_map:
            keyboard = [["–Ω–æ–≤—ã–µ"], ["–≤ —Ä–∞–±–æ—Ç–µ"], ["–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: –Ω–æ–≤—ã–µ, –≤ —Ä–∞–±–æ—Ç–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.", reply_markup=reply_markup)
            return
            
        orders = get_orders_by_status(status_map[status])
        if not orders:
            await update.message.reply_text("üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        else:
            msg = f"üì¶ –ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':\n\n"
            for order in orders:
                msg += f"üîπ –ù–æ–º–µ—Ä: {order[0]}\n   UserID: {order[1]}\n   –°—É–º–º–∞: {order[4]}‚ÇΩ\n   –ê–¥—Ä–µ—Å: {order[2]}\n   –¢–µ–ª–µ—Ñ–æ–Ω: {order[3]}\n   –í—Ä–µ–º—è: {order[5]}\n\n"
            await update.message.reply_text(msg)
            
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä":
        admin_states[user_id]["state"] = "edit_product_category"
        if not await show_categories_for_selection(update, context, "edit"):
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
        return

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        admin_states[user_id]["state"] = "add_product_category"
        if not await show_categories_for_selection(update, context, "add"):
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
        return

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
        admin_states[user_id]["state"] = "delete_product_category"
        if not await show_categories_for_selection(update, context, "delete"):
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
        return

    if text == "üì¶ –ó–∞–∫–∞–∑—ã":
        admin_states[user_id]["state"] = "orders_status"
        keyboard = [["–Ω–æ–≤—ã–µ"], ["–≤ —Ä–∞–±–æ—Ç–µ"], ["–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)
        return

    if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        users = get_all_users()
        if users:
            msg = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                user_id_db, username, first_name, last_name, is_blocked = user
                status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
                msg += f"üîπ ID: {user_id_db}\n   –ò–º—è: {first_name} {last_name or ''}\n   –õ–æ–≥–∏–Ω: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n   –°—Ç–∞—Ç—É—Å: {status}\n\n"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("üë• –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    if text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        admin_states[user_id]["state"] = "block_waiting_user_id"
        await update.message.reply_text("üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return

    if text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        admin_states[user_id]["state"] = "unblock_waiting_user_id"
        await update.message.reply_text("‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return

    if text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        questions = get_support_questions()
        if questions:
            msg = "üÜò –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:\n\n"
            for q in questions:
                msg += f"üîπ ID: {q[0]}\n   UserID: {q[1]}\n   –í–æ–ø—Ä–æ—Å: {q[2]}\n   –î–∞—Ç–∞: {q[3]}\n\n"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("üÜò –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
            
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    if text == "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å":
        admin_states[user_id]["state"] = "answer_waiting"
        await update.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ID:–æ—Ç–≤–µ—Ç':")
        return

    if text == "‚óÄÔ∏è –í—ã–π—Ç–∏":
        if user_id in admin_states:
            del admin_states[user_id]
        keyboard = [
            ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
            ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=reply_markup)
        log_admin_action(user_id, "ADMIN_LOGOUT")
        return

async def handle_answer_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states:
        return
        
    if admin_states[user_id].get("state") == "answer_waiting":
        try:
            text = update.message.text.strip()
            if ":" not in text:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: ID:–æ—Ç–≤–µ—Ç")
                return
                
            qid, answer = text.split(":", 1)
            qid = int(qid)
            answer_support_question(qid, answer.strip())
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            log_admin_action(user_id, "SUPPORT_ANSWERED", f"Question ID: {qid}")
        except ValueError:
            await update.message.reply_text("‚ùå ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)

async def handle_block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states:
        return
        
    if admin_states[user_id].get("state") == "block_waiting_user_id":
        try:
            block_id = int(update.message.text.strip())
            block_user(block_id)
            await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {block_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            log_admin_action(user_id, "USER_BLOCKED", f"Blocked user: {block_id}")
        except ValueError:
            await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
            
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)

async def handle_unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states:
        return
        
    if admin_states[user_id].get("state") == "unblock_waiting_user_id":
        try:
            unblock_id = int(update.message.text.strip())
            unblock_user(unblock_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblock_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            log_admin_action(user_id, "USER_UNBLOCKED", f"Unblocked user: {unblock_id}")
        except ValueError:
            await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
            
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)