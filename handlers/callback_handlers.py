from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    get_categories, get_products_by_category, get_product, add_to_cart,
    get_cart, update_cart_item, remove_from_cart, clear_cart,
    create_order, get_user_orders, generate_order_number,
    get_band_country
)
from .states import admin_states

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    category_id = int(query.data.split('_')[1])
    products = get_products_by_category(category_id)
    
    if not products:
        await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    keyboard = []
    for product_id, product_name, price, description in products:
        keyboard.append([InlineKeyboardButton(f"{product_name} - {price}‚ÇΩ", callback_data=f'product_{product_id}')])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='back_to_categories')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[1])
    product = get_product(product_id)
    
    if not product:
        await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    product_id, product_name, price, description, category_name = product
    
    message_text = f"""
üéµ {product_name}
üíµ –¶–µ–Ω–∞: {price}‚ÇΩ
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_to_cart_{product_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f'category_{next((cat[0] for cat in get_categories() if cat[1] == category_name), 1)}')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def add_product_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
   query = update.callback_query
   await query.answer()
   
   product_id = int(query.data.split('_')[3])
   user_id = query.from_user.id
   
   add_to_cart(user_id, product_id)
   await query.edit_message_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

async def handle_cart_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    action, product_id = query.data.split('_')
    product_id = int(product_id)
    
    cart_items, _ = get_cart(user_id)
    current_quantity = next((item[3] for item in cart_items if item[4] == product_id), 0)

    if action == 'increase':
        update_cart_item(user_id, product_id, current_quantity + 1)
    elif action == 'decrease':
        update_cart_item(user_id, product_id, current_quantity - 1)
    elif action == 'remove':
        remove_from_cart(user_id, product_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items, total = get_cart(user_id)

    if not cart_items:
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    message_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    keyboard = []

    for item_id, product_name, price, quantity, product_id in cart_items:
        message_text += f"{product_name} - {price}‚ÇΩ x {quantity} = {price * quantity}‚ÇΩ\n"
        row = [
            InlineKeyboardButton("‚ûñ", callback_data=f'decrease_{product_id}'),
            InlineKeyboardButton(f"{quantity}", callback_data=f'quantity_{product_id}'),
            InlineKeyboardButton("‚ûï", callback_data=f'increase_{product_id}'),
            InlineKeyboardButton("‚ùå", callback_data=f'remove_{product_id}')
        ]
        keyboard.append(row)

    message_text += f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"

    # –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    keyboard.append([InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')])
    keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')])
    keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def clear_user_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    clear_cart(user_id)
    await query.edit_message_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {user.first_name}! üéµ"
    
    keyboard = [
        ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
        ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await query.edit_message_text(welcome_text)
    await context.bot.send_message(chat_id=user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    categories = get_categories()
    keyboard = []
    
    for category_id, category_name in categories:
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f'category_{category_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üé∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=reply_markup)

async def show_edit_product_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from database import get_categories
    user_id = update.effective_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # admin_states —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ .states
    admin_states[user_id] = {"state": "edit_product_category_selection"}
    
    categories = get_categories()
    keyboard = []
    
    for category_id, category_name in categories:
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f'edit_category_{category_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)

async def show_edit_product_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback_query –∏–ª–∏ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        category_id = int(query.data.split('_')[2])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # admin_states —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ .states
        admin_states[user_id] = {"state": "edit_product_selection", "edit_category_id": category_id}
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        # admin_states —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ .states
        if user_id in admin_states and "edit_category_id" in admin_states[user_id]:
            category_id = admin_states[user_id]["edit_category_id"]
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
    
    from database import get_products_by_category, get_categories
    products = get_products_by_category(category_id)
    
    if not products:
        if update.callback_query:
            await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    keyboard = []
    for product_id, product_name, price, description in products:
        keyboard.append([InlineKeyboardButton(f"{product_name} - {price}‚ÇΩ", callback_data=f'edit_product_{product_id}')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='edit_categories')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    category_name = next((cat[1] for cat in get_categories() if cat[0] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    message_text = f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):"
    
    if update.callback_query:
        await query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def show_edit_product_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback_query –∏–ª–∏ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        product_id = int(query.data.split('_')[2])
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º product_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from .states import admin_states
        if user_id in admin_states and "edit_product_id" in admin_states[user_id]:
            product_id = admin_states[user_id]["edit_product_id"]
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    
    from database import get_product
    product = get_product(product_id)
    
    if not product:
        if update.callback_query:
            await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    product_id, product_name, price, description, category_name = product
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # admin_states —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ .states
    admin_states[user_id] = {"state": "edit_product_form", "edit_product_id": product_id}
    
    message_text = f"""
üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}
üíµ –¶–µ–Ω–∞: {price}‚ÇΩ
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'edit_field_name_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É", callback_data=f'edit_field_price_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_field_description_{product_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f'edit_category_{next((cat[0] for cat in get_categories() if cat[1] == category_name), 1)}')],
        [InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data='admin_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def start_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data_parts = query.data.split('_')
    field = data_parts[2]  # name, price, or description
    product_id = int(data_parts[3])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # admin_states —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ .states
    admin_states[user_id] = {"state": "editing_field", "edit_product_id": product_id, "edit_field": field}
    
    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "price": "—Ü–µ–Ω—É",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
    }
    
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]} –¥–ª—è —Ç–æ–≤–∞—Ä–∞:")

async def finish_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if user_id not in admin_states or admin_states[user_id].get("state") != "editing_field":
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    product_id = admin_states[user_id]["edit_product_id"]
    field = admin_states[user_id]["edit_field"]
    new_value = update.message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from database import get_product, update_product
    
    product = get_product(product_id)
    if not product:
        await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    product_id_db, product_name_db, price_db, description_db, category_name_db = product
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from database import get_categories
    categories = get_categories()
    category_id = next((cat[0] for cat in categories if cat[1] == category_name_db), None)
    
    if not category_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_product_name = product_name_db
    if field == "name":
        update_product_name = new_value
    elif field == "price":
        try:
            new_value = float(new_value)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    elif field == "description":
        pass # new_value —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    update_product(update_product_name, category_id, field, new_value)
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ show_edit_product_form —Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, 
    # –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    from database import get_categories
    categories = get_categories()
    category_name = next((cat[1] for cat in categories if cat[0] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_text = f"""
üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {update_product_name if field == 'name' else product_name_db}
üíµ –¶–µ–Ω–∞: {new_value if field == 'price' else price_db}‚ÇΩ
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {new_value if field == 'description' else description_db}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'edit_field_name_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É", callback_data=f'edit_field_price_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_field_description_{product_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f'edit_category_{category_id}')],
        [InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data='admin_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message_text, reply_markup=reply_markup)

# show_admin_menu —É–¥–∞–ª–µ–Ω–∞ - —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ admin_handlers.py