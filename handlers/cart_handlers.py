from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    get_cart, create_order, add_to_cart,
    update_cart_item, remove_from_cart, clear_cart
)
from .states import user_states

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart_items, total = get_cart(user_id)
    
    if not cart_items:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    message_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    keyboard = []
    
    for item_id, product_name, price, quantity, product_id in cart_items:
        message_text += f"{product_name} - {price}‚ÇΩ x {quantity} = {price * quantity}‚ÇΩ\n"
        
        row = [
            InlineKeyboardButton("‚ûñ", callback_data=f'decrease_{product_id}'),
            InlineKeyboardButton(f"{quantity}", callback_data=f'quantity_{product_id}'),
            InlineKeyboardButton("‚ûï", callback_data=f'increase_{product_id}'),
            InlineKeyboardButton("‚ùå", callback_data=f'remove_{product_id}')
        ]
        keyboard.append(row)
    
    message_text += f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    keyboard.append([InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')])
    keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')])
    keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def handle_checkout_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start_checkout_from_button(query, context)

async def start_checkout_from_button(query, context):
    user_id = query.from_user.id
    cart_items, total = get_cart(user_id)
    
    if not cart_items:
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return
    
    user_states[user_id] = {'state': 'checkout_waiting_address'}
    await context.bot.send_message(
        chat_id=user_id,
        text="üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )

async def start_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart_items, total = get_cart(user_id)
    
    if not cart_items:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return
    
    user_states[user_id] = {'state': 'checkout_waiting_address'}
    await update.message.reply_text(
        "üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_address_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'checkout_waiting_address':
        return
    
    address = update.message.text
    user_states[user_id] = {
        'state': 'checkout_waiting_phone',
        'address': address
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=reply_markup
    )

async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'checkout_waiting_phone':
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text
    
    address = user_states[user_id]['address']
    cart_items, total = get_cart(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_number = create_order(user_id, address, phone, total, cart_items)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ {order_number} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üì¶ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}‚ÇΩ\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
        ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    
    del user_states[user_id]