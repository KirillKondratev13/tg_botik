#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
(–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç telegram –º–æ–¥—É–ª—è)
"""

import sys
import os
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(__file__))

def test_database_functions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import (
            get_categories, get_products_by_category, get_product,
            add_product, update_product, delete_product, remove_from_cart_by_product
        )
        print("‚úÖ Database functions imported successfully")
        return True
    except ImportError as e:
        print(f"‚ùå Database import error: {e}")
        return False

def create_mock_telegram():
    """–°–æ–∑–¥–∞–Ω–∏–µ mock-–æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è telegram"""
    class MockUpdate:
        pass
    
    class MockContextTypes:
        DEFAULT_TYPE = None
    
    class MockReplyKeyboardMarkup:
        def __init__(self, *args, **kwargs):
            pass
    
    class MockInlineKeyboardButton:
        def __init__(self, *args, **kwargs):
            pass
    
    class MockInlineKeyboardMarkup:
        def __init__(self, *args, **kwargs):
            pass
    
    # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥—É–ª–∏
    import types
    telegram_module = types.ModuleType('telegram')
    telegram_module.Update = MockUpdate
    telegram_module.ReplyKeyboardMarkup = MockReplyKeyboardMarkup
    telegram_module.InlineKeyboardButton = MockInlineKeyboardButton
    telegram_module.InlineKeyboardMarkup = MockInlineKeyboardMarkup
    
    telegram_ext_module = types.ModuleType('telegram.ext')
    telegram_ext_module.ContextTypes = MockContextTypes
    
    sys.modules['telegram'] = telegram_module
    sys.modules['telegram.ext'] = telegram_ext_module

def test_admin_handlers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è telegram
    create_mock_telegram()
    
    try:
        from handlers.admin_handlers import (
            validate_price, validate_text_field, MESSAGES, log_admin_action
        )
        print("‚úÖ Admin handler functions imported successfully")
        return True
    except ImportError as e:
        print(f"‚ùå Admin handlers import error: {e}")
        return False

def test_validation_functions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è telegram
    create_mock_telegram()
    
    try:
        from handlers.admin_handlers import validate_price, validate_text_field
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã
        test_cases_price = [
            ("100", True, 100.0),
            ("100.50", True, 100.5),
            ("100,50", True, 100.5),
            ("0", False, 0.0),
            ("-10", False, 0.0),
            ("abc", False, 0.0),
            ("", False, 0.0)
        ]
        
        print("  üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã:")
        for price_str, expected_valid, expected_value in test_cases_price:
            is_valid, value = validate_price(price_str)
            if is_valid == expected_valid and (not expected_valid or abs(value - expected_value) < 0.001):
                print(f"    ‚úÖ '{price_str}' -> valid={is_valid}, value={value}")
            else:
                print(f"    ‚ùå '{price_str}' -> expected valid={expected_valid}, value={expected_value}, got valid={is_valid}, value={value}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        test_cases_text = [
            ("Valid text", True),
            ("", False),
            ("   ", False),
            ("A", True),
            ("A" * 255, True),
            ("A" * 256, False)
        ]
        
        print("  üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        for text, expected in test_cases_text:
            result = validate_text_field(text)
            if result == expected:
                print(f"    ‚úÖ '{text[:20]}...' -> {result}")
            else:
                print(f"    ‚ùå '{text[:20]}...' -> expected {expected}, got {result}")
        
        return True
    except Exception as e:
        print(f"‚ùå Validation functions error: {e}")
        return False

def test_database_operations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    temp_db = tempfile.NamedTemporaryFile(suffix='.db', delete=False)
    temp_db.close()
    
    try:
        import database
        import sqlite3
        
        # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã
        original_connect = sqlite3.connect
        def temp_connect(db_path):
            return original_connect(temp_db.name)
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º sqlite3.connect –≤ –º–æ–¥—É–ª–µ database
        database.sqlite3.connect = temp_connect
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.init_db()
        print("  ‚úÖ Database initialized")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = database.get_categories()
        print(f"  ‚úÖ Categories retrieved: {len(categories)} categories found")
        
        if categories:
            category_id = categories[0][0]
            category_name = categories[0][1]
            print(f"  üìÅ Testing with category: {category_name} (ID: {category_id})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            test_product_name = "Test Product"
            test_price = 1000.0
            test_description = "Test Description"
            
            database.add_product(test_product_name, category_id, test_price, test_description)
            print("  ‚úÖ Product added successfully")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏–ª—Å—è
            products = database.get_products_by_category(category_id)
            test_product_found = any(prod[1] == test_product_name for prod in products)
            if test_product_found:
                print("  ‚úÖ Product found in category after adding")
            else:
                print("  ‚ùå Product not found after adding")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            database.update_product(test_product_name, category_id, "price", 2000.0)
            print("  ‚úÖ Product price updated")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updated_products = database.get_products_by_category(category_id)
            updated_product = next((prod for prod in updated_products if prod[1] == test_product_name), None)
            if updated_product and updated_product[2] == 2000.0:
                print("  ‚úÖ Product price updated correctly (1000 -> 2000)")
            else:
                print(f"  ‚ùå Product price not updated correctly. Current: {updated_product[2] if updated_product else 'Not found'}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            database.update_product(test_product_name, category_id, "name", "Updated Test Product")
            print("  ‚úÖ Product name updated")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            database.update_product("Updated Test Product", category_id, "description", "Updated Test Description")
            print("  ‚úÖ Product description updated")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            database.remove_from_cart_by_product("Updated Test Product", category_id)
            print("  ‚úÖ Cascade deletion from carts completed")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            database.delete_product("Updated Test Product", category_id)
            print("  ‚úÖ Product deleted successfully")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            final_products = database.get_products_by_category(category_id)
            test_product_still_exists = any(prod[1] in [test_product_name, "Updated Test Product"] for prod in final_products)
            if not test_product_still_exists:
                print("  ‚úÖ Product successfully removed from database")
            else:
                print("  ‚ùå Product still exists after deletion")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        database.sqlite3.connect = original_connect
        
        return True
        
    except Exception as e:
        print(f"‚ùå Database operations error: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            os.unlink(temp_db.name)
        except:
            pass

def test_message_constants():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è telegram
    create_mock_telegram()
    
    try:
        from handlers.admin_handlers import MESSAGES
        
        required_messages = [
            'success_product_updated',
            'success_product_added', 
            'success_product_deleted',
            'error_category_not_found',
            'error_invalid_price',
            'error_empty_field',
            'confirm_deletion'
        ]
        
        all_found = True
        for msg_key in required_messages:
            if msg_key in MESSAGES:
                print(f"  ‚úÖ '{msg_key}': {MESSAGES[msg_key][:50]}...")
            else:
                print(f"  ‚ùå '{msg_key}': MISSING")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Message constants error: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n")
    
    success_count = 0
    total_tests = 5
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ë–î
    if test_database_functions():
        success_count += 1
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∞
    if test_admin_handlers():
        success_count += 1
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if test_validation_functions():
        success_count += 1
        
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
    if test_database_operations():
        success_count += 1
        
    # –¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    if test_message_constants():
        success_count += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)