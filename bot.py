from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from database import init_db
from handlers import (
    start_quiz, check_answer, show_stats, 
    start_support, handle_support_question,
    start_reference, handle_reference_band,
    show_assortment, show_cart
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç. üéµ\n"
        "–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    keyboard = [
        ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
        ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
        await start_quiz(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
    elif text == "‚ùì –°–ø—Ä–∞–≤–∫–∞":
        await start_reference(update, context)
    elif text == "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await start_support(update, context)
    elif text == "üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç":
        await show_assortment(update, context)
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        await show_cart(update, context)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        from handlers import user_states
        if user_id in user_states:
            state = user_states[user_id].get('state')
            if state == 'quiz_waiting_answer':
                await check_answer(update, context)
            elif state == 'support_waiting_question':
                await handle_support_question(update, context)
            elif state == 'reference_waiting_band':
                await handle_reference_band(update, context)
        else:
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
