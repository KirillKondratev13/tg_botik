from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
import random
from database import (
    update_quiz_stats, get_quiz_stats, add_support_question, get_band_country,
    get_categories, get_products_by_category, get_product, add_to_cart,
    get_cart, update_cart_item, remove_from_cart, clear_cart,
    create_order, get_user_orders, generate_order_number,
    is_admin, check_admin_password, get_all_users, block_user, unblock_user, is_user_blocked,
    get_support_questions, answer_support_question,
    update_product, add_product, delete_product, get_orders_by_status, update_order_status
)
# --- –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
from music_data import MUSIC_QUIZ_DATA

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
admin_states = {}

# --- –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
ADMIN_PASSWORD_PROMPT = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    admin_states[user_id] = {"state": "waiting_password"}
    await update.message.reply_text(ADMIN_PASSWORD_PROMPT)

async def handle_admin_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states or admin_states[user_id].get("state") != "waiting_password":
        return
    password = update.message.text.strip()
    if check_admin_password(user_id, password):
        admin_states[user_id] = {"state": "admin_menu"}
        await show_admin_menu(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        del admin_states[user_id]

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"],
        ["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"],
        ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "üì¶ –ó–∞–∫–∞–∑—ã"],
        ["‚óÄÔ∏è –í—ã–π—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    if user_id not in admin_states:
        return

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ ---
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if admin_states[user_id].get("state") == "edit_product_category":
        categories = get_categories()
        keyboard = [[cat[1]] for cat in categories] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        category = update.message.text.strip()
        if category == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        admin_states[user_id]["state"] = "edit_product_select"
        admin_states[user_id]["edit_category"] = category
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
    if admin_states[user_id].get("state") == "edit_product_select":
        category_name = admin_states[user_id]["edit_category"]
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        if not category_id:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        products = get_products_by_category(category_id)
        if not products:
            await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        keyboard = [[prod[1]] for prod in products] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        product = update.message.text.strip()
        if product == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "edit_product_category"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
            return
        admin_states[user_id]["state"] = "edit_product_param"
        admin_states[user_id]["edit_product"] = product
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Ü–µ–Ω–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=ReplyKeyboardMarkup([["—Ü–µ–Ω–∞"], ["–Ω–∞–∑–≤–∞–Ω–∏–µ"], ["–æ–ø–∏—Å–∞–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True, one_time_keyboard=True))
        return
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if admin_states[user_id].get("state") == "edit_product_param":
        param = update.message.text.strip().lower()
        if param == "üîô –Ω–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "edit_product_select"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        if param not in ["—Ü–µ–Ω–∞", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–æ–ø–∏—Å–∞–Ω–∏–µ"]:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í—ã–±–µ—Ä–∏—Ç–µ: —Ü–µ–Ω–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")
            return
        admin_states[user_id]["state"] = "edit_product_value"
        admin_states[user_id]["edit_param"] = param
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{param}':")
        return
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
    if admin_states[user_id].get("state") == "edit_product_value":
        new_value = update.message.text.strip()
        category_name = admin_states[user_id]["edit_category"]
        product_name = admin_states[user_id]["edit_product"]
        param = admin_states[user_id]["edit_param"]
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        if category_id:
            update_product(product_name, category_id, param, new_value)
            await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
    if admin_states[user_id].get("state") == "add_product_category":
        category = update.message.text.strip()
        if category == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        admin_states[user_id]["add_category"] = category
        admin_states[user_id]["state"] = "add_product_info"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä: –ì–∏—Ç–∞—Ä–∞, 50000, –ö–ª–∞—Å—Å–Ω–∞—è –≥–∏—Ç–∞—Ä–∞)")
        return
    if admin_states[user_id].get("state") == "add_product_info":
        info = update.message.text.strip().split(",")
        if update.message.text.strip() == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "add_product_category"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
            return
        if len(info) != 3:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")
            return
        category_name = admin_states[user_id]["add_category"]
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        if category_id:
            add_product(info[0].strip(), category_id, info[1].strip(), info[2].strip())
            await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
    if admin_states[user_id].get("state") == "delete_product_category":
        categories = get_categories()
        keyboard = [[cat[1]] for cat in categories] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        category = update.message.text.strip()
        if category == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        admin_states[user_id]["state"] = "delete_product_select"
        admin_states[user_id]["delete_category"] = category
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return
    if admin_states[user_id].get("state") == "delete_product_select":
        category_name = admin_states[user_id]["delete_category"]
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        if not category_id:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        products = get_products_by_category(category_id)
        if not products:
            await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        keyboard = [[prod[1]] for prod in products] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        product = update.message.text.strip()
        if product == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "delete_product_category"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
            return
        admin_states[user_id]["state"] = "delete_product_confirm"
        admin_states[user_id]["delete_product"] = product
        await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':")
        return
    if admin_states[user_id].get("state") == "delete_product_confirm":
        category_name = admin_states[user_id]["delete_category"]
        product_name = update.message.text.strip()
        if product_name == "üîô –ù–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "delete_product_select"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        categories = get_categories()
        category_id = next((cat[0] for cat in categories if cat[1] == category_name), None)
        if category_id:
            delete_product(product_name, category_id)
            await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return

    # --- –ó–∞–∫–∞–∑—ã ---
    if admin_states[user_id].get("state") == "orders_status":
        status = update.message.text.strip().lower()
        status_map = {"–Ω–æ–≤—ã–µ": "new", "–≤ —Ä–∞–±–æ—Ç–µ": "in_progress", "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": "completed"}
        if status == "üîô –Ω–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        if status not in status_map:
            keyboard = [["–Ω–æ–≤—ã–µ"], ["–≤ —Ä–∞–±–æ—Ç–µ"], ["–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: –Ω–æ–≤—ã–µ, –≤ —Ä–∞–±–æ—Ç–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.", reply_markup=reply_markup)
            return
        orders = get_orders_by_status(status_map[status])
        if not orders:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        else:
            msg = f"–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':\n"
            for order in orders:
                msg += f"–ù–æ–º–µ—Ä: {order[0]}, UserID: {order[1]}, –°—É–º–º–∞: {order[4]}, –ê–¥—Ä–µ—Å: {order[2]}, –¢–µ–ª–µ—Ñ–æ–Ω: {order[3]}, –í—Ä–µ–º—è: {order[5]}\n"
            await update.message.reply_text(msg)
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏
    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä":
        await show_edit_product_categories(update, context)
        return
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        admin_states[user_id]["state"] = "add_product_category"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–∞–ª–µ–µ
        return
    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
        admin_states[user_id]["state"] = "delete_product_category"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–∞–ª–µ–µ
        return
    if text == "üì¶ –ó–∞–∫–∞–∑—ã":
        admin_states[user_id]["state"] = "orders_status"
        keyboard = [["–Ω–æ–≤—ã–µ"], ["–≤ —Ä–∞–±–æ—Ç–µ"], ["–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)
        return
    if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()
        if users:
            msg = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                user_id, username, first_name, last_name, is_blocked = user
                status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "–ê–∫—Ç–∏–≤–µ–Ω"
                msg += f"ID: {user_id}, –ò–º—è: {first_name} {last_name}, –õ–æ–≥–∏–Ω: {username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}, –°—Ç–∞—Ç—É—Å: {status}\n"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return
    if text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        admin_states[user_id]["state"] = "block_waiting_user_id"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return
    if text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        admin_states[user_id]["state"] = "unblock_waiting_user_id"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return
    if text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        questions = get_support_questions()
        if questions:
            msg = "–ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:\n\n"
            for q in questions:
                msg += f"ID: {q[0]}, UserID: {q[1]}, –í–æ–ø—Ä–æ—Å: {q[2]}, –î–∞—Ç–∞: {q[3]}\n"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return
    if text == "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å":
        admin_states[user_id]["state"] = "answer_waiting"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ID:–æ—Ç–≤–µ—Ç':")
        return
    if text == "‚óÄÔ∏è –í—ã–π—Ç–∏":
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞
        if user_id in admin_states:
            del admin_states[user_id]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
            ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=reply_markup)
        return
    if admin_states[user_id].get("state") == "orders_status":
        status = text.lower()
        status_map = {"–Ω–æ–≤—ã–µ": "new", "–≤ —Ä–∞–±–æ—Ç–µ": "in_progress", "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": "completed"}
        if status == "üîô –Ω–∞–∑–∞–¥":
            admin_states[user_id]["state"] = "admin_menu"
            await show_admin_menu(update, context)
            return
        if status not in status_map:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: –Ω–æ–≤—ã–µ, –≤ —Ä–∞–±–æ—Ç–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")
            return
        orders = get_orders_by_status(status_map[status])
        if not orders:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        else:
            msg = f"–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':\n"
            for order in orders:
                msg += f"–ù–æ–º–µ—Ä: {order[0]}, UserID: {order[1]}, –°—É–º–º–∞: {order[4]}, –ê–¥—Ä–µ—Å: {order[2]}, –¢–µ–ª–µ—Ñ–æ–Ω: {order[3]}, –í—Ä–µ–º—è: {order[5]}\n"
            await update.message.reply_text(msg)
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
        return
async def handle_answer_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states:
        return
    if admin_states[user_id].get("state") == "answer_waiting":
        try:
            text = update.message.text.strip()
            qid, answer = text.split(":", 1)
            qid = int(qid)
            answer_support_question(qid, answer)
            await update.message.reply_text(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ id:–æ—Ç–≤–µ—Ç.")
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞.")

async def handle_block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states:
        return
    if admin_states[user_id].get("state") == "block_waiting_user_id":
        try:
            block_id = int(update.message.text.strip())
            block_user(block_id)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {block_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except Exception:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)

async def handle_unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_states:
        return
    if admin_states[user_id].get("state") == "unblock_waiting_user_id":
        try:
            unblock_id = int(update.message.text.strip())
            unblock_user(unblock_id)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblock_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except Exception:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
        admin_states[user_id]["state"] = "admin_menu"
        await show_admin_menu(update, context)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def start_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart_items, total = get_cart(user_id)
    
    if not cart_items:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return
    
    user_states[user_id] = {'state': 'checkout_waiting_address'}
    await update.message.reply_text(
        "üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_address_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'checkout_waiting_address':
        return
    
    address = update.message.text
    user_states[user_id] = {
        'state': 'checkout_waiting_phone',
        'address': address
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=reply_markup
    )

async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'checkout_waiting_phone':
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text
    
    address = user_states[user_id]['address']
    cart_items, total = get_cart(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_number = create_order(user_id, address, phone, total, cart_items)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ {order_number} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üì¶ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}‚ÇΩ\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
        ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    
    del user_states[user_id]




async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    song, artist = random.choice(list(MUSIC_QUIZ_DATA.items()))
    user_states[user_id] = {'state': 'quiz_waiting_answer', 'correct_artist': artist}
    await update.message.reply_text(f"üéµ –£–≥–∞–¥–∞–π—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Å–Ω–∏: '{song}'")

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    if user_id not in user_states or user_states[user_id].get('state') != 'quiz_waiting_answer':
        return
    
    correct_artist = user_states[user_id]['correct_artist']
    is_correct = user_answer.lower() == correct_artist.lower()
    update_quiz_stats(user_id, is_correct)

    if is_correct:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_artist}")

    del user_states[user_id]

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    correct, total = get_quiz_stats(user_id)
    await update.message.reply_text(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total}")

async def start_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {'state': 'support_waiting_question'}
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

async def handle_support_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'support_waiting_question':
        return
    
    question = update.message.text
    add_support_question(user_id, question)
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    del user_states[user_id]

async def start_reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {'state': 'reference_waiting_band'}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∏ —è –ø–æ–∫–∞–∂—É —Å—Ç—Ä–∞–Ω—É, –æ—Ç–∫—É–¥–∞ –æ–Ω–∞ —Ä–æ–¥–æ–º.")

async def handle_reference_band(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'reference_waiting_band':
        return
    
    band_name = update.message.text
    country = get_band_country(band_name)
    
    if country:
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ {band_name} —Ä–æ–¥–æ–º –∏–∑ {country}.")
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
    
    del user_states[user_id]

async def show_assortment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_categories()
    keyboard = []
    
    for category_id, category_name in categories:
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f'category_{category_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=reply_markup)

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    category_id = int(query.data.split('_')[1])
    products = get_products_by_category(category_id)
    
    if not products:
        await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    keyboard = []
    for product_id, product_name, price, description in products:
        keyboard.append([InlineKeyboardButton(f"{product_name} - {price}‚ÇΩ", callback_data=f'product_{product_id}')])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='back_to_categories')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[1])
    product = get_product(product_id)
    
    if not product:
        await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    product_id, product_name, price, description, category_name = product
    
    message_text = f"""
üéµ {product_name}
üíµ –¶–µ–Ω–∞: {price}‚ÇΩ
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_to_cart_{product_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f'category_{next((cat[0] for cat in get_categories() if cat[1] == category_name), 1)}')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def add_product_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
   query = update.callback_query
   await query.answer()
   
   product_id = int(query.data.split('_')[3])
   user_id = query.from_user.id
   
   add_to_cart(user_id, product_id)
   await query.edit_message_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart_items, total = get_cart(user_id)
    
    if not cart_items:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    message_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    keyboard = []
    
    for item_id, product_name, price, quantity, product_id in cart_items:
        message_text += f"{product_name} - {price}‚ÇΩ x {quantity} = {price * quantity}‚ÇΩ\n"
        
        row = [
            InlineKeyboardButton("‚ûñ", callback_data=f'decrease_{product_id}'),
            InlineKeyboardButton(f"{quantity}", callback_data=f'quantity_{product_id}'),
            InlineKeyboardButton("‚ûï", callback_data=f'increase_{product_id}'),
            InlineKeyboardButton("‚ùå", callback_data=f'remove_{product_id}')
        ]
        keyboard.append(row)
    
    message_text += f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    keyboard.append([InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')])
    keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')])
    keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)



# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def handle_checkout_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start_checkout_from_button(query, context)

async def start_checkout_from_button(query, context):
    user_id = query.from_user.id
    cart_items, total = get_cart(user_id)
    
    if not cart_items:
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return
    
    user_states[user_id] = {'state': 'checkout_waiting_address'}
    await context.bot.send_message(
        chat_id=user_id,
        text="üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )


async def handle_cart_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    action, product_id = query.data.split('_')
    product_id = int(product_id)
    
    cart_items, _ = get_cart(user_id)
    current_quantity = next((item[3] for item in cart_items if item[4] == product_id), 0)

    if action == 'increase':
        update_cart_item(user_id, product_id, current_quantity + 1)
    elif action == 'decrease':
        update_cart_item(user_id, product_id, current_quantity - 1)
    elif action == 'remove':
        remove_from_cart(user_id, product_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items, total = get_cart(user_id)

    if not cart_items:
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    message_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    keyboard = []

    for item_id, product_name, price, quantity, product_id in cart_items:
        message_text += f"{product_name} - {price}‚ÇΩ x {quantity} = {price * quantity}‚ÇΩ\n"
        row = [
            InlineKeyboardButton("‚ûñ", callback_data=f'decrease_{product_id}'),
            InlineKeyboardButton(f"{quantity}", callback_data=f'quantity_{product_id}'),
            InlineKeyboardButton("‚ûï", callback_data=f'increase_{product_id}'),
            InlineKeyboardButton("‚ùå", callback_data=f'remove_{product_id}')
        ]
        keyboard.append(row)

    message_text += f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"

    # –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    keyboard.append([InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')])
    keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')])
    keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def clear_user_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    clear_cart(user_id)
    await query.edit_message_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {user.first_name}! üéµ"
    
    keyboard = [
        ["üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üé∏ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
        ["‚ùì –°–ø—Ä–∞–≤–∫–∞", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await query.edit_message_text(welcome_text)
    await context.bot.send_message(chat_id=user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    categories = get_categories()
    keyboard = []
    
    for category_id, category_name in categories:
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f'category_{category_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üé∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=reply_markup)

async def show_edit_product_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from database import get_categories
    user_id = update.effective_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_states[user_id] = {"state": "edit_product_category_selection"}
    
    categories = get_categories()
    keyboard = []
    
    for category_id, category_name in categories:
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f'edit_category_{category_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)


async def show_edit_product_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    category_id = int(query.data.split('_')[2])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_states[user_id] = {"state": "edit_product_selection", "edit_category_id": category_id}
    
    from database import get_products_by_category, get_categories
    products = get_products_by_category(category_id)
    
    if not products:
        await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    keyboard = []
    for product_id, product_name, price, description in products:
        keyboard.append([InlineKeyboardButton(f"{product_name} - {price}‚ÇΩ", callback_data=f'edit_product_{product_id}')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='edit_categories')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    category_name = next((cat[1] for cat in get_categories() if cat[0] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    await query.edit_message_text(f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):", reply_markup=reply_markup)


async def show_edit_product_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    product_id = int(query.data.split('_')[2])
    
    from database import get_product
    product = get_product(product_id)
    
    if not product:
        await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    product_id, product_name, price, description, category_name = product
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_states[user_id] = {"state": "edit_product_form", "edit_product_id": product_id}
    
    message_text = f"""
üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}
üíµ –¶–µ–Ω–∞: {price}‚ÇΩ
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'edit_field_name_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É", callback_data=f'edit_field_price_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_field_description_{product_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f'edit_category_{next((cat[0] for cat in get_categories() if cat[1] == category_name), 1)}')],
        [InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data='admin_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)


async def start_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data_parts = query.data.split('_')
    field = data_parts[2]  # name, price, or description
    product_id = int(data_parts[3])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_states[user_id] = {"state": "editing_field", "edit_product_id": product_id, "edit_field": field}
    
    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "price": "—Ü–µ–Ω—É",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
    }
    
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]} –¥–ª—è —Ç–æ–≤–∞—Ä–∞:")


async def finish_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if user_id not in admin_states or admin_states[user_id].get("state") != "editing_field":
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    product_id = admin_states[user_id]["edit_product_id"]
    field = admin_states[user_id]["edit_field"]
    new_value = update.message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from database import get_product, update_product
    
    product = get_product(product_id)
    if not product:
        await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    product_id_db, product_name_db, price_db, description_db, category_name_db = product
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from database import get_categories
    categories = get_categories()
    category_id = next((cat[0] for cat in categories if cat[1] == category_name_db), None)
    
    if not category_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_product_name = product_name_db
    if field == "name":
        update_product_name = new_value
    elif field == "price":
        try:
            new_value = float(new_value)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    elif field == "description":
        pass  # new_value —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    update_product(update_product_name, category_id, field, new_value)
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    admin_states[user_id]["state"] = "edit_product_form"
    
    # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ show_edit_product_form —Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º,
    # –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    from database import get_categories
    categories = get_categories()
    category_name = next((cat[1] for cat in categories if cat[0] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_text = f"""
üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {update_product_name if field == 'name' else product_name_db}
üíµ –¶–µ–Ω–∞: {new_value if field == 'price' else price_db}‚ÇΩ
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {new_value if field == 'description' else description_db}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'edit_field_name_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É", callback_data=f'edit_field_price_{product_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_field_description_{product_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f'edit_category_{category_id}')],
        [InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data='admin_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message_text, reply_markup=reply_markup)
