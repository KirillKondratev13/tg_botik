from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
import random
from database import update_quiz_stats, get_quiz_stats, add_support_question, get_band_country
from music_data import MUSIC_QUIZ_DATA

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    song, artist = random.choice(list(MUSIC_QUIZ_DATA.items()))
    user_states[user_id] = {'state': 'quiz_waiting_answer', 'correct_artist': artist}
    await update.message.reply_text(f"üéµ –£–≥–∞–¥–∞–π—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Å–Ω–∏: '{song}'")

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    if user_id not in user_states or user_states[user_id].get('state') != 'quiz_waiting_answer':
        return
    
    correct_artist = user_states[user_id]['correct_artist']
    is_correct = user_answer.lower() == correct_artist.lower()
    update_quiz_stats(user_id, is_correct)

    if is_correct:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_artist}")

    del user_states[user_id]

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    correct, total = get_quiz_stats(user_id)
    await update.message.reply_text(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total}")

async def start_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {'state': 'support_waiting_question'}
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

async def handle_support_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'support_waiting_question':
        return
    
    question = update.message.text
    add_support_question(user_id, question)
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    del user_states[user_id]

async def start_reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {'state': 'reference_waiting_band'}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∏ —è –ø–æ–∫–∞–∂—É —Å—Ç—Ä–∞–Ω—É, –æ—Ç–∫—É–¥–∞ –æ–Ω–∞ —Ä–æ–¥–æ–º.")

async def handle_reference_band(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id].get('state') != 'reference_waiting_band':
        return
    
    band_name = update.message.text
    country = get_band_country(band_name)
    
    if country:
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ {band_name} —Ä–æ–¥–æ–º –∏–∑ {country}.")
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
    
    del user_states[user_id]

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
async def show_assortment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
